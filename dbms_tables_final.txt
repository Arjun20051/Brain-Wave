CREATE SEQUENCE user_id_seq
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE TABLE webuser1 (
    NAME VARCHAR2(20),
    PHNO NUMBER(10) NOT NULL,
    DOB DATE,
    EMAIL VARCHAR2(40) UNIQUE,
    GENDER VARCHAR2(6),
    STREET VARCHAR2(20),
    DISTRICT VARCHAR2(20),
    STATE VARCHAR2(20),
    USERID NUMBER DEFAULT user_id_seq.NEXTVAL PRIMARY KEY,
    PASSWORD VARCHAR2(25)
);



CREATE TABLE COURSE(
    CID NUMBER(20),
    CNAME VARCHAR2(20),
    CPRICE NUMBER(10),
    CSUBJECT VARCHAR2(20),
    NOOFLECTURES NUMBER(5),
    CDURATION VARCHAR2(20),
    PRIMARY KEY (CID)
);



CREATE TABLE INSTRUCTOR(
INSID VARCHAR(3),
COURSEID NUMBER(3),
INSNAME VARCHAR(20),
RATING NUMBER(5),
EXPERIENCE NUMBER(5),
FOREIGN KEY(COURSEID) REFERENCES COURSE(CID),
PRIMARY KEY(INSID,COURSEID)
);

ALTER TABLE INSTRUCTOR ADD COUNT NUMBER(3);

CREATE SEQUENCE trans_id_seq
    START WITH 1000
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;



CREATE TABLE TRANSACTION1(
    USERID NUMBER(3),
    COURSEID NUMBER(3),
    INSID VARCHAR(3),
    TRANSID NUMBER DEFAULT trans_id_seq.NEXTVAL,
    AMOUNT NUMBER(10),
    DATE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    METHOD VARCHAR(20),
    PRIMARY KEY(USERID,COURSEID),
    FOREIGN KEY(INSID, COURSEID) REFERENCES INSTRUCTOR(INSID, COURSEID),
    FOREIGN KEY(USERID) REFERENCES WEBUSER1(USERID),
    FOREIGN KEY(COURSEID) REFERENCES COURSE(CID)
);

ONE USER SHOULDNT  ENROLL IN SAME COURSE


////using session variable to store userid

///FROM TRANSACTION , USING UID GET CID ,INSID THEN GO FOR LIST OF CID & COURSE(HAVE UDI,CID PUT INSTRUCTOR ON LECTURE PAGE &FEEDBACK)-->RESPECTIVE LECTURE(USE INSID,FEEDBACK)--->RESPECTIVE TEST-->RESULT TABLE(CERTI)
AFTER THIS IF CID UID IN RESULT TABLE ,THE COURSE COMPLETED SHOULD BE DISPLAYED IN THE PAGE WHERE LIST OF COURSE IS PRESENT & ALL HIS/HER CERTIFICATES


CREATE TABLE LECTURE (
    LECTUREID NUMBER(4) NOT NULL,
    LECNAME VARCHAR2(50),
    COURSEID NUMBER(4),
    INSID VARCHAR(3),
 LECTURENOTES VARCHAR2(350),
    FOREIGN KEY(INSID, COURSEID) REFERENCES INSTRUCTOR(INSID, COURSEID),
    PRIMARY KEY (LECTUREID,COURSEID,INSID)
	);


////in lecture page navigation to feedback and mcq test

CREATE TABLE mcq(
    qid NUMBER PRIMARY KEY,
    courseid NUMBER(3),
    question VARCHAR2(255),
    option1 VARCHAR2(255),
    option2 VARCHAR2(255),
    option3 VARCHAR2(255),
    option4 VARCHAR2(255),
    correct_option VARCHAR2(1), 
    CONSTRAINT fk_tests_course FOREIGN KEY (courseid) REFERENCES course (CID)
);


CREATE TABLE PDFS (
    PID NUMBER PRIMARY KEY,
    CID NUMBER(3),
    PDF_NAME VARCHAR2(255),
    CONSTRAINT fk_pdfs_course FOREIGN KEY (CID) REFERENCES COURSE(CID)
);



CREATE TABLE FEEDBACK(
FID NUMBER(3) PRIMARY KEY,
USERID NUMBER(3),
CID NUMBER(4),
INSID VARCHAR(3),
RATING NUMBER(5),
REVIEW VARCHAR(100),
DATE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY(INSID, CID) REFERENCES INSTRUCTOR(INSID, COURSEID)
);





//////////////BASED ON THIS INSTRUCTOR RATING SHOULD CHANGE ON INSTRUCTOR TABLE


CREATE OR REPLACE TRIGGER update_instructor_rating
AFTER INSERT ON FEEDBACK
FOR EACH ROW
DECLARE
    total_rating NUMBER;
    total_feedbacks NUMBER;
    new_rating NUMBER;
BEGIN
    -- Calculate the total rating and total number of feedbacks for the instructor and course
    SELECT SUM(RATING), COUNT(*) INTO total_rating, total_feedbacks
    FROM FEEDBACK
    WHERE INSID = :NEW.INSID AND CID = :NEW.CID;

    -- Calculate the new rating (average rating)
    IF total_feedbacks > 0 THEN
        new_rating := total_rating / total_feedbacks;
    ELSE
        new_rating := 0; -- Avoid division by zero
    END IF;

    -- Update the INSTRUCTOR table with the new rating
    UPDATE INSTRUCTOR
    SET RATING = new_rating
    WHERE INSID = :NEW.INSID AND COURSEID = :NEW.CID;
END;
/


//////////////////////////////////////

CREATE TABLE TEST_RESULT (
    USERID NUMBER(3),
    CID NUMBER(3),
    INSID VARCHAR(3),
    DATE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ATTEMPTS NUMBER(3),
    RESULT VARCHAR(20),
    PRIMARY KEY (USERID, CID, INSID, DATE_TIME),
    FOREIGN KEY(USERID) REFERENCES WEBUSER1(USERID),
    FOREIGN KEY(INSID, CID) REFERENCES INSTRUCTOR(INSID, COURSEID)
);

insert into test_result(userid,cid,insid,attempts,result) values(7,1,'i2',3,'pass');




//////////////////////////



CREATE TABLE COURSE_PHOTOS(
CID NUMBER(3),
NAME_JPG VARCHAR(100)
);

INSERT INTO COURSE_PHOTOS VALUES(1,'c1');
INSERT INTO COURSE_PHOTOS VALUES(2,'c2');
INSERT INTO COURSE_PHOTOS VALUES(3,'c3');
INSERT INTO COURSE_PHOTOS VALUES(4,'c4');
INSERT INTO COURSE_PHOTOS VALUES(5,'c5');
INSERT INTO COURSE_PHOTOS VALUES(6,'c6');
INSERT INTO COURSE_PHOTOS VALUES(7,'c7');



